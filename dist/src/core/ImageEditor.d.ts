import { ImageEditorConfig, EditorEventKey, EditorEventData } from '../types';
import { Plugin, PluginConstructor, PluginConfig } from '../interfaces/Plugin';
import { Tool } from '../interfaces/Tool';
import { Command, HistoryState } from '../interfaces/Command';
import { EventEmitter } from './EventEmitter';
import { CanvasManager } from './CanvasManager';
import { PluginManager } from './PluginManager';
import { HistoryManager } from './HistoryManager';
export declare class ImageEditor {
    private config;
    private canvasManager;
    private eventEmitter;
    private inputManager;
    private pluginManager;
    private historyManager;
    private currentTool;
    private tools;
    private container;
    private destroyed;
    constructor(config: ImageEditorConfig);
    private resolveContainer;
    private setupEventDelegation;
    private handleShortcut;
    loadImage(source: string | File | ImageData): Promise<void>;
    exportImage(format: string, quality?: number): Promise<Blob>;
    destroy(): void;
    selectTool(toolName: string): void;
    getCurrentTool(): Tool | null;
    registerTool(tool: Tool): void;
    unregisterTool(toolName: string): void;
    on<K extends EditorEventKey>(event: K, callback: (data: EditorEventData<K>) => void): void;
    off<K extends EditorEventKey>(event: K, callback: (data: EditorEventData<K>) => void): void;
    emit<K extends EditorEventKey>(event: K, data: EditorEventData<K>): void;
    getCanvasManager(): CanvasManager;
    getEventEmitter(): EventEmitter;
    getContainer(): HTMLElement;
    getConfig(): ImageEditorConfig;
    registerPlugin(PluginClass: PluginConstructor, config?: PluginConfig): Promise<void>;
    unregisterPlugin(name: string): Promise<void>;
    activatePlugin(name: string): Promise<void>;
    deactivatePlugin(name: string): Promise<void>;
    getPlugin(name: string): Plugin | undefined;
    getPlugins(): Map<string, Plugin>;
    getActivePlugins(): Plugin[];
    configurePlugin(name: string, config: PluginConfig): Promise<void>;
    getPluginManager(): PluginManager;
    executeCommand(command: Command): Promise<void>;
    undo(): Promise<boolean>;
    redo(): Promise<boolean>;
    canUndo(): boolean;
    canRedo(): boolean;
    clearHistory(): void;
    getHistoryState(): HistoryState;
    startCommandGroup(name: string): void;
    endCommandGroup(): void;
    getHistoryManager(): HistoryManager;
    isDestroyed(): boolean;
}
//# sourceMappingURL=ImageEditor.d.ts.map