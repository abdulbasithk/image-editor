{"version":3,"file":"bundle.37b09a8a2737a1625085.js","mappings":"iIAEA,IAAY,GAAZ,SAAYA,GACV,sBACA,oBACA,kBACA,kBACA,eACD,CAND,CAAY,MAAW,I","sources":["webpack://@abdulbasithk/image-editor/./src/interfaces/Plugin.ts"],"sourcesContent":["import { ImageEditor } from '../core/ImageEditor';\n\nexport enum PluginState {\n  UNLOADED = 'unloaded',\n  LOADING = 'loading',\n  LOADED = 'loaded',\n  ACTIVE = 'active',\n  ERROR = 'error',\n}\n\nexport interface PluginMetadata {\n  name: string;\n  version: string;\n  description?: string;\n  author?: string;\n  license?: string;\n  homepage?: string;\n  keywords?: string[];\n  dependencies?: string[];\n  peerDependencies?: string[];\n  engines?: {\n    imageEditor?: string;\n    node?: string;\n  };\n}\n\nexport interface PluginHooks {\n  // Lifecycle hooks\n  onInstall?: (editor: ImageEditor) => void | Promise<void>;\n  onUninstall?: (editor: ImageEditor) => void | Promise<void>;\n  onActivate?: (editor: ImageEditor) => void | Promise<void>;\n  onDeactivate?: (editor: ImageEditor) => void | Promise<void>;\n\n  // Editor hooks\n  onEditorReady?: (editor: ImageEditor) => void;\n  onImageLoad?: (imageData: ImageData, editor: ImageEditor) => void;\n  onImageExport?: (blob: Blob, format: string, editor: ImageEditor) => void;\n\n  // Tool hooks\n  onToolSelect?: (toolName: string, editor: ImageEditor) => void;\n  onToolAction?: (toolName: string, action: string, data: any, editor: ImageEditor) => void;\n\n  // Canvas hooks\n  onCanvasRender?: (context: CanvasRenderingContext2D, editor: ImageEditor) => void;\n  onCanvasResize?: (width: number, height: number, editor: ImageEditor) => void;\n\n  // Event hooks\n  beforeEvent?: (eventName: string, data: any, editor: ImageEditor) => boolean | void;\n  afterEvent?: (eventName: string, data: any, editor: ImageEditor) => void;\n}\n\nexport interface PluginConfig {\n  enabled?: boolean;\n  settings?: Record<string, any>;\n}\n\nexport interface Plugin extends PluginMetadata, PluginHooks {\n  // Plugin state\n  readonly state: PluginState;\n  readonly id: string;\n\n  // Core methods\n  install(editor: ImageEditor, config?: PluginConfig): void | Promise<void>;\n  uninstall(editor: ImageEditor): void | Promise<void>;\n  activate(editor: ImageEditor): void | Promise<void>;\n  deactivate(editor: ImageEditor): void | Promise<void>;\n\n  // Configuration\n  configure?(config: PluginConfig): void;\n  getDefaultConfig?(): PluginConfig;\n\n  // Validation\n  isCompatible?(editor: ImageEditor): boolean;\n  checkDependencies?(availablePlugins: Map<string, Plugin>): string[];\n}\n\nexport interface PluginConstructor {\n  new (): Plugin;\n}\n\nexport interface PluginRegistry {\n  [key: string]: PluginConstructor;\n}\n"],"names":["PluginState"],"sourceRoot":""}